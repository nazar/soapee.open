/* eslint-disable max-len */
import _ from 'lodash';
import Bluebird from 'bluebird';
import bcrypt from 'bcrypt';
import * as yup from 'yup';

import { UserInputError } from 'services/errors';
import User from 'models/user';
import { sendEmail } from 'services/email';

export default async function sendResetFacebookPassword({ input }) {
  const { email } = await validateInputs();

  return Bluebird
    .resolve(findFacebookUserByEmail())
    .then(generateResetCodes)
    .tap(sendPasswordResetEmail);

  //

  function findFacebookUserByEmail() {
    return User
      .query()
      .findOne({
        email
      })
      .then((user) => {
        if (_.isEmpty(user)) {
          throw new UserInputError('Email not found', { code: 'email_not_found' });
        } else {
          return user
            .$relatedQuery('verifications')
            .then((verifications) => {
              if (_.isEmpty(verifications)) {
                throw new UserInputError('Email not found', { code: 'email_not_found' });
              } else {
                const facebookProvider = _.find(verifications, { providerName: 'facebook' });

                if (facebookProvider) {
                  return facebookProvider;
                } else {
                  throw new UserInputError('Social Login', { code: 'social_login_not_found' });
                }
              }
            });
        }
      });
  }

  async function generateResetCodes(verification) {
    const resetHash = await resetTheHash();
    const resetCode = resetTheCode();

    return verification
      .$query()
      .patch({
        resetHash,
        resetCode
      })
      .then(() => ({
        token: resetHash,
        code: resetCode
      }));

    //

    async function resetTheHash() {
      const salt = await bcrypt.genSalt();

      return bcrypt.hash(Date.now().toString(), salt);
    }

    function resetTheCode() {
      return `${_.random(1000, 9999)}-${_.random(1000, 9999)}`;
    }
  }

  function sendPasswordResetEmail({ code }) {
    const body = _.template(passwordResetEmail)({ code });

    return sendEmail({
      to: email,
      subject: 'SOAPEE.COM - Facebook Account Recovery',
      body
    });
  }

  function validateInputs() {
    return schema.validate(input);
  }
}

const schema = yup.object().shape({
  email: yup.string().email().required()
});

const passwordResetEmail = `
A Facebook account recovery code was requested for your http://soapee.com account.

Enter the following Facebook account recovery code to convert your Facebook based Soapee account to a local Soapee password and email based account: 

code: <%= code %>

It is safe to ignore this email if this Facebook account recovery request was NOT generated by you.
`;
