# /etc/nginx/nginx.conf

user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log stderr error;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;


events {
  # The maximum number of simultaneous connections that can be opened by
  # a worker process.
  worker_connections 1024;
}

http {
  # Includes mapping of file name extensions to MIME types of responses
  # and defines the default type.
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  # Name servers used to resolve names of upstream servers into addresses.
  # It's also needed when using tcpsocket and udpsocket in Lua modules.
  #resolver 208.67.222.222 208.67.220.220;

  # Don't tell nginx version to clients.
  server_tokens off;

  # Specifies the maximum accepted body size of a client request, as
  # indicated by the request header Content-Length. If the stated content
  # length is greater than this size, then the client receives the HTTP
  # error code 413. Set to 0 to disable.
  client_max_body_size 2m;

  # Timeout for keep-alive connections. Server will close connections after
  # this time.
  keepalive_timeout 65;

  # Sendfile copies data between one FD and other from within the kernel,
  # which is more efficient than read() + write().
  sendfile on;

  # Don't buffer data-sends (disable Nagle algorithm).
  # Good for sending frequent small bursts of data in real time.
  tcp_nodelay on;

  # Causes nginx to attempt to send its HTTP response head in one packet,
  # instead of using partial frames.
  #tcp_nopush on;


  # Path of the file with Diffie-Hellman parameters for EDH ciphers.
  #ssl_dhparam /etc/ssl/nginx/dh2048.pem;

  # Specifies that our cipher suits should be preferred over client ciphers.
  ssl_prefer_server_ciphers on;

  # Enables a shared SSL cache with size that can hold around 8000 sessions.
  ssl_session_cache shared:SSL:2m;


  # Enable gzipping of responses.
  gzip on;

  # Set the Vary HTTP header as defined in the RFC 2616.
  gzip_vary on;

  # Enable checking the existence of precompressed files.
  #gzip_static on;

  # Enables gzipping of responses for the specified MIME types in addition to “text/html”.
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;


  # Specifies the main log format.
  # Specifies the main log format.
  #log_format main '$request_time - $remote_addr - $remote_user [$time_local] '
  #    '"$request" $status $body_bytes_sent "$http_referer" '
  #    '"$http_user_agent" "$http_x_forwarded_for"';

  # no dev logging
  #access_log /dev/stdout main;
  access_log /dev/null;


  # define WS upgrade over HTTP
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  # define websocket server on client-web for passthrough
  upstream websocket {
    server client-web:3000;
  }

  upstream websocketapi {
    server api:3000;
  }

  server {
    listen 3000;

    # the API server
    location /api {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://api:3000;
    }

    # the Vite WS HMR passthrough
    location /vite-hmr {
      proxy_pass http://websocket;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 1d;
      proxy_send_timeout 1d;
    }

    # the API subscriptions WS server passthrough
    location /api/graphql/subscriptions {
      proxy_pass http://websocketapi;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
    }

    # Uploaded imageables
    location /imageables/ {
      alias /home/images/;
    }

    # the client-web
    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_pass http://client-web:3000;
    }
  }
}
